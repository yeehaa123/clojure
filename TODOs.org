#+SETUPFILE: theme-bigblow.setup

* Who are we?
** Offcourse
  We envision a society where education is democratized. One where all knowledge 
  us equally accessible to everyone. One where each individual is able to learn 
  smarter together with others.

  Our free and open platform encourages people to explore, create and share 
  collections of hand curated links to the web's best learning resources. 
  It is our mission to bring this community driven education around the globe.

  __Values__
  + Openness
  + Community
  + Ownership

  __Approach__
  + Everyone's an Expert
  + (Learning = Teaching, Teaching is Learning)
  + All content is free, open, and accessible
  + Community Driven Development
  
  __Projects__
  + [[http://platform.offcourse.io][Online Platform]]
  + [[http://offcourse.io/courses.html][Courses and Masterclasses]]

* Who are you?
* Guidelines
  + Stay a beginner 
  + Not knowing is not less valuable than knowing
  + Own and even embrace your mistakes
  + Avoid or explain jargon
  + Don't interrupt each other
  + Recapitulate before moving on to your own question
  + Be Nice
* Clojure(Script)
** Parasitic Language
  + Languages that don't have their own VM
  + Other examples: Scala, Elm, Elixir, LFE ...
** Clojure and Clojurescript
   + Differences mainly depend on host VM
   + Clojure       -> Java Virtual Machine 
   + ClojureScript -> V8 (or, very rarely, Rhino, Nashhorn, Chakra)
   + ClojureCLR    -> .net (hardly maintained or used...)
** Vars                                                              :Clay:
  + Indicated by the reserved word 'def'
  + Global
  + Can refer to both functions and values
  + Can be mutable (^dynamic)
  + [[http://stackoverflow.com/questions/11730828/clojure-and-dynamic][Discussion (Stack Overflow)]]
** Fractions                                                        :Emily:
*** Finiteness and Infinity
**** Finite State Machine
    + Computers can only solve problems that are (theoretically) finite
**** Rational Numbers 
    + All Integers and Fractions
    + 1/3
    + Countable
    + Finite
**** Irrational Numbers (infinite)
    + All the numbers on the continuous line from -infinity to infinity that cannot be expressed a integers or fractions
    + 0.33333333333
    + Uncountable
    + Infinite
**** Rounding Errors
    + [[http://www.xbeat.net/vbspeed/i_BankersRounding.htm][Banker's Rounding]]
    + [[https://en.wikipedia.org/wiki/Mathematics_of_bookmaking][Mathematics of Bookmaking (Wikipedia)]]
    + [[https://documentation.apple.com/en/soundtrackpro/usermanual/index.html#chapter=B%2526section=2%2526tasks=true][Music Recording]]
*** Music
**** Harmony
    + [[https://www.youtube.com/watch?v=bhkdyCPYgLs][Rich Hickey on Harmonikit]]
    + [[http://www.aboutscotland.co.uk/harmony/prop.html][Pythagoras]]
    + [[https://www.youtube.com/watch?v=Mfsnlbd-4xQ][Functional Composition (Chris Ford)]]
**** Noise
     + [[http://www.inf.fu-berlin.de/lehre/WS01/19548-U/shannon.html][Shannon's Theorem]]
     + [[https://en.wikipedia.org/wiki/Comparison_of_analog_and_digital_recording#Digital_errors][Digital Errors (Wikipedia)]]
     + [[https://monoskop.org/images/7/73/Kittler_Friedrich_Gramophone_Film_Typewriter.pdf][Friedrich Kittler, Grammophone, Film, Typewriter]]
*** How to use them
    + [[http://stackoverflow.com/questions/1596484/when-i-divide-numbers-in-clojure-i-get-a-fraction-how-do-i-get-the-decimal][Discussion (Stack Overflow)]]
    + [[https://github.com/clojure-cookbook/clojure-cookbook/blob/master/01_primitive-data/1-14_working-with-rational-numbers.asciidoc][Performance Implications]]
** Clojure and Lisp
   | linked list                        | sequence                             |
   |------------------------------------+--------------------------------------|
   | lists  are mutable                 | sequences are immutable              |
   | list are spatial                   | sequences are temporal               |
   | lists are always eagerly evaluated | sequences are often lazily evaluated |
   | only abstraction                   | underlying abstraction               |
   | single data structure              | multiple data structures             |
** Persistent Datastructures
*** Sets                                                              :Emily:
    + [[http://clojure.org/reference/data_structures#Sets][Sets (Clojure Documentation)]]
    + [[http://blog.jayfields.com/2012/09/replacing-common-code-with-clojureset.html][Fun with Sets]]
*** Tries                                                             :Amar:
**** [[https://en.wikipedia.org/wiki/Trie][Tries (wikipedia)]]
**** [[https://www.youtube.com/watch?v=SiFwRtCnxv4][David Nolan on Tries]]
*** Transients
    + [[http://hypirion.com/musings/understanding-clojure-transients][Understanding Transients]]
    + [[http://clojure.org/reference/transients][Official Documentation (Clojure)]]
